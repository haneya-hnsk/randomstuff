local npc = script.Parent
local humanoid = npc:WaitForChild("Humanoid")

-- Store last hitter
local lastHitPlayer = nil

-- Track who damaged the NPC
humanoid.HealthChanged:Connect(function(currentHealth)
	if currentHealth < humanoid.MaxHealth then
		local tag = humanoid:FindFirstChild("creator")
		if tag and tag.Value and tag.Value:IsA("Player") then
			lastHitPlayer = tag.Value
		end
	end
end)

-- When NPC dies
humanoid.Died:Connect(function()
	if lastHitPlayer then
		print(lastHitPlayer.Name .. " killed the NPC!")

		-- Example: Give 10 score
		local stats = lastHitPlayer:FindFirstChild("leaderstats")
		if stats then
			local score = stats:FindFirstChild("Score")
			if score then
				score.Value += 10
			end
		end
	end
end)
To display **text stats like an overlay** (e.g., health, score, level, or any live stat) in **Roblox Studio**, you'll use a **ScreenGui** with a **TextLabel** and update it with a **LocalScript**.

Here‚Äôs how to make a **HUD-style text overlay** that shows live-updating values:

---

## üéØ GOAL

Display something like:

```
Health: 90
Score: 1200
Level: 5
```

On the screen at all times (like an overlay).

---

## ‚úÖ Step-by-Step Guide

### 1. üñº Create the GUI

1. In the **Explorer**, go to `StarterGui`.
2. Right-click `StarterGui` ‚Üí `Insert Object` ‚Üí `ScreenGui` ‚Üí Rename it to `HUDGui`.
3. Inside `HUDGui`, insert a `TextLabel`.

   * Rename it `StatsLabel`.
   * Customize the position (e.g., top-left corner: `Position = UDim2.new(0, 10, 0, 10)`).
   * Set `Size` to something like `UDim2.new(0, 200, 0, 100)`.
   * Set `BackgroundTransparency = 1` to make it invisible.
   * Set `TextScaled = true` to auto-size the text.

---

### 2. üìú Add a LocalScript to Update the Text

Inside `StatsLabel`, insert a **LocalScript** and paste this code:

```lua
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local label = script.Parent

-- Dummy stats (you can update with real ones)
local score = 0
local level = 1

-- Example: Updating every 0.1 seconds
while true do
    local health = math.floor(humanoid.Health)
    
    label.Text = "Health: " .. health .. "\nScore: " .. score .. "\nLevel: " .. level
    
    -- Simulate score increase (just for testing)
    score += 1
    if score % 100 == 0 then
        level += 1
    end
    
    wait(0.1)
end
```

> You can replace the `score` and `level` logic with your own system, like pulling values from `leaderstats` or another source.

---

## üîÅ Alternative: Show Leaderstats

If you're using **leaderstats** (common for points, money, etc.):

### Add this in the `LocalScript` instead:

```lua
local player = game.Players.LocalPlayer
local label = script.Parent

local function updateStats()
    local stats = player:FindFirstChild("leaderstats")
    if stats then
        local score = stats:FindFirstChild("Score")
        local level = stats:FindFirstChild("Level")
        local scoreValue = score and score.Value or 0
        local levelValue = level and level.Value or 1
        
        label.Text = "Score: " .. scoreValue .. "\nLevel: " .. levelValue
    end
end

-- Update whenever stats change
local stats = player:WaitForChild("leaderstats")
for _, stat in ipairs(stats:GetChildren()) do
    stat:GetPropertyChangedSignal("Value"):Connect(updateStats)
end

-- Initial update
updateStats()
```

---

## üß† Want Custom Design?

You can:

* Use `UIListLayout` for cleaner arrangement.
* Add icons or images.
* Add multiple `TextLabel`s instead of one.

---

Let me know what stat you want to display (Health? Score? EXP?) and I can tailor it for your case.
Ah, got it! You want a **pop-up GUI** to appear when the player **touches an object**, and **it should work on multiple objects**. Here's how to do that in **Roblox Studio**.

---

## üß± Goal

* When a player touches **any of several objects**, a **GUI pop-up** appears.
* Works with multiple touchable objects.
* GUI disappears after a while or on close.

---

## ‚úÖ Step-by-Step Guide

### 1. üßä Add the Touch Part(s)

* Create a **Part** in the Workspace (e.g., a cube or sphere).
* Rename it to something like `PopupTrigger1`, `PopupTrigger2`, etc.
* Make sure **Anchored = true** so it doesn‚Äôt fall.
* Optionally group multiple parts in a Folder like `TouchTriggers`.

---

### 2. üé® Make the GUI

* In **StarterGui**, add a `ScreenGui`, name it something like `PopupGui`.
* Inside it, add a `Frame` and design your pop-up window.
* Inside the `Frame`, add a `TextLabel` or `TextButton` (like a "Close" button).
* Set the `Frame.Visible = false` (hidden by default).

---

### 3. üß† Script to Show GUI on Touch

#### a. Add a **LocalScript** in `StarterPlayerScripts`:

This script listens to **RemoteEvents** when a part is touched.

Right-click `StarterPlayer ‚Üí StarterPlayerScripts` ‚Üí `Insert Object ‚Üí LocalScript`

```lua
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local popupGui = player:WaitForChild("PlayerGui"):WaitForChild("PopupGui")
local popupFrame = popupGui:WaitForChild("Frame")

local replicatedStorage = game:GetService("ReplicatedStorage")
local showPopupEvent = replicatedStorage:WaitForChild("ShowPopup")

showPopupEvent.OnClientEvent:Connect(function()
    popupFrame.Visible = true

    -- Optional: Auto close after 5 seconds
    task.delay(5, function()
        popupFrame.Visible = false
    end)
end)
```

#### b. Add a **RemoteEvent** in `ReplicatedStorage`

* In **ReplicatedStorage**, add a `RemoteEvent`.
* Rename it to `ShowPopup`.

#### c. Add a **Script** in each Touch Part:

Or reuse one script for all. Example for one:

```lua
local part = script.Parent
local replicatedStorage = game:GetService("ReplicatedStorage")
local showPopupEvent = replicatedStorage:WaitForChild("ShowPopup")

part.Touched:Connect(function(hit)
    local player = game.Players:GetPlayerFromCharacter(hit.Parent)
    if player then
        showPopupEvent:FireClient(player)
    end
end)
```

üëâ You can copy this script into every touchable part **or** use a single script to connect them all.

---

## üß© Final Folder Structure

```
Workspace
 ‚îî‚îÄ‚îÄ PopupTrigger1 (with Script)
 ‚îî‚îÄ‚îÄ PopupTrigger2 (with Script)
ReplicatedStorage
 ‚îî‚îÄ‚îÄ ShowPopup (RemoteEvent)
StarterGui
 ‚îî‚îÄ‚îÄ PopupGui
      ‚îî‚îÄ‚îÄ Frame (Visible = false)
StarterPlayer
 ‚îî‚îÄ‚îÄ StarterPlayerScripts
      ‚îî‚îÄ‚îÄ LocalScript (handles the GUI)
```

---

## üîÅ Tips

* You can add logic to show different messages per part.
* Want only one-time touch? Add a `touched = true` flag.
* Want it to show different GUI per object? Use parameters in `:FireClient(player, data)`.

---

Want me to pack this into a working `.rbxl` demo file for you to study?
